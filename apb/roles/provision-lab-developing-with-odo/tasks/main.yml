---
# tasks file for lab-developing-with-odo
- debug:
    msg: "Installing infrastructure for workshop in {{ namespace }}"
- debug:
    msg: "Provisioning {{ user_count }} users"

- debug:
    var: images_to_prepull

# TODO: Fix prepull
- name: Process prepull template
  template:
    src: ./templates/prepull.yaml.j2
    dest: /tmp/prepull.yaml

- name: Check for nodeselector compute
  command: oc get nodes -l node-role.kubernetes.io/compute -o jsonpath='{ .items[*].metadata.name }'
  register: compute_nodes

- name: Check for nodeselector worker
  command: oc get nodes -l node-role.kubernetes.io/worker -o jsonpath='{ .items[*].metadata.name }'
  register: worker_nodes

- set_fact:
    nodeselector: "node-role.kubernetes.io/compute: 'true'"
  when: compute_nodes.stdout != ''

- set_fact:
    nodeselector: "node-role.kubernetes.io/worker:"
  when: worker_nodes.stdout != ''

- name: Create DaemonSet to Prepull images (targeting worker/compute nodes if defined, else all)
  k8s:
    state: present
    src: /tmp/prepull.yaml
    namespace: "{{ namespace }}"

- name: Wait for images to be prepulled
  command: oc rollout status daemonset/prepull-{{ __lab_name }} -n {{ namespace }}

- name: Create homeroom resources
  shell: >
    oc process -f {{ homeroom_template_path }} \
    --param APPLICATION_NAME="{{ homeroom_app_name }}" | oc apply -n {{ namespace }} -f -

- name: Wait for the homeroom to deploy
  command: oc rollout status dc/{{ homeroom_app_name }} -n {{ namespace }}

- name: Get homeroom Route
  k8s_facts:
    api_version: "route.openshift.io/v1"
    kind: Route
    name: "{{ homeroom_app_name }}"
    namespace: "{{ namespace }}"
  register: homeroom_route

- set_fact:
    homeroom_route_url: "https://{{ homeroom_route.resources[0].spec.host }}"

- name: Create workshop resources
  shell: >
    oc process -f {{ spawner_template_path }} \
    --param APPLICATION_NAME="{{ __lab_name }}" \
    --param PROJECT_NAME="{{ namespace }}" \
    --param IDLE_TIMEOUT="{{ idle_timeout }}" \
    --param SERVER_LIMIT="{{ user_count}} " \
    --param HOMEROOM_LINK="{{ homeroom_route_url }}" \
    --param MAX_SESSION_AGE="{{ max_session_age }}" | oc apply -n {{ namespace }} -f -

- name: Wait for the spawner to deploy
  command: oc rollout status dc/{{ __lab_name }} -n {{ namespace }}

- name: Updating spawner to use image for workshop
  command: oc tag "{{ __workshop_image }}" "{{ __lab_name }}-app:latest" -n {{ namespace }}

- name: Get homeroom Route
  k8s_facts:
    api_version: "route.openshift.io/v1"
    kind: Route
    name: "{{ __lab_name }}"
    namespace: "{{ namespace }}"
  register: lab_route

- set_fact:
    lab_url: "https://{{ lab_route.resources[0].spec.host }}"

## TODO: Update the homeroom configmap with this workshop
## For now, we create a config map with the entry to add to the main CM
#- name: Create lab ConfigMap with homeroom configuration
#  k8s:
#    state: present
#    definition: "{{ lookup('template', item ) | from_yaml }}"
#    namespace: "{{ namespace }}"
#  loop:
#  - ./templates/workshop-homeroom-cfg.yaml.j2
#
#- name: Message to the user
#  debug:
#    msg: "Add the contents of configmap/homeroom-cfg-{{ __lab_name }} to configmap/homeroom-cfg"

- name: Get homeroom configmap content
  shell: oc get cm/{{ homeroom_app_name }}-cfg -o jsonpath='{ .data.workshops\.json }' -n {{ namespace }}
  register: homeroom_cm_data

- set_fact:
    homeroom_cm_json: "{{ homeroom_cm_data.stdout | from_json }}"

- set_fact:
    workshop_present: "{{ homeroom_cm_json | json_query(my_query) }}"
  vars:
    my_query: "[?title=='{{ __lab_name }}']"

#Â If it's there do nothing, else, add it

- set_fact:
    workshop_list: "{{ ( homeroom_cm_json | union(this_workshop_json)) | default(homeroom_cm_json) }}"
  when: not workshop_present

- name: Write homeroom configuration to a file
  copy:
    dest: /tmp/configmap.json
    content: "{{ workshop_list | to_nice_json }}"
  when: workshop_list is defined

- name: Update CM
  shell: oc create configmap {{ homeroom_app_name }}-cfg --from-file=workshops.json=/tmp/configmap.json --dry-run -o yaml | oc replace -n {{ namespace }} -f -
  when: workshop_list is defined

- name: Rollout homeroom to pickup config changes
  command: oc rollout latest dc/{{ homeroom_app_name }} -n {{ namespace }}

- name: Wait for homeroom to be ready again
  command: oc rollout status dc/{{ homeroom_app_name }} -n {{ namespace }}
