#!/bin/bash
set -x
set -eo pipefail

echo "Init: $(date +'%Y%m%d.%H%M%S-%3N')" >> /tmp/odo-times.log
# If WorkingDir is injected as an env from odo and destination path is not equal to WorkingDir
if [ ! -z "${ODO_S2I_WORKING_DIR}" ] && ([ "${ODO_S2I_SRC_BIN_PATH}" != "${ODO_S2I_WORKING_DIR}" ] || [ "${ODO_S2I_DEPLOYMENT_DIR}" != "${ODO_S2I_WORKING_D
IR}" ]); then

    # If ODO_SRC_BACKUP_DIR is injected by odo
    if [ -n  "$ODO_SRC_BACKUP_DIR" ]; then

        # If it doesn't exit create it
        if [ ! -d ${ODO_SRC_BACKUP_DIR} ]; then
            mkdir -p ${ODO_SRC_BACKUP_DIR}/src
        fi

        # Backup the sources in DestinationDir to ODO_SRC_BACKUP_DIR because the assemble script for some s2i images
        # moves sources from DestinationDir to WorkingDir thereby deleting it there(DestinationDir). So, back it up
        # for partial push use cases like watch
        echo "Init backup: $(date +'%Y%m%d.%H%M%S-%3N')" >> /tmp/odo-times.log
        rsync -rlptD0O ${ODO_S2I_SRC_BIN_PATH}/src/. ${ODO_SRC_BACKUP_DIR}/src/
        echo "End backup: $(date +'%Y%m%d.%H%M%S-%3N')" >> /tmp/odo-times.log
    fi

    # Backup field separators and set it to \n to clean the destination dir of even those files and folders that have space in name
    # the shell's ls -A interprets for some reason the space as a new line and hence including '\n' in IFS works-around it
    b_IFS=$IFS
    b_OFS=$OIFS

    OIFS="$IFS"
    IFS=$'\n'

    # Clear all those dirs in WorkingDir that exist in DestinationDir so that when assemble script moves sources from
    # DestinationDir to WorkingDir, it sees the directory clean and doesn't complain:
    # https://github.com/redhat-developer/odo/issues/1054
    echo "$(date +'%Y%m%d.%H%M%S-%3N') - Start clean working dir" >> /tmp/odo-times.log
    for file in `ls -A ${ODO_S2I_SRC_BIN_PATH}/src/`
    do
            rm -fr "$ODO_S2I_WORKING_DIR/$file"
    done
    echo "$(date +'%Y%m%d.%H%M%S-%3N') - End clean working dir " >> /tmp/odo-times.log

    # Restore OIFS and IFS to previous values
    OIFS=$b_OFS
    IFS=$b_IFS

    # In case of java clear off the target directory
    # ToDo: This is a temporary hack to work-around the issue with openjdk s2i image.
    # Eventually, idea is to try to make this generic and agnostic of any particular s2i image

    if [ -n "$ODO_S2I_BUILDER_IMG" ] && [ "$ODO_S2I_BUILDER_IMG" == "redhat-openjdk-18/openjdk18-openshift" ]; then
        echo "$(date +'%Y%m%d.%H%M%S-%3N') - Init Java clear target" >> /tmp/odo-times.log
        rm -fr ${ODO_S2I_SRC_BIN_PATH}/src/target
        echo "$(date +'%Y%m%d.%H%M%S-%3N') - End Java clear target" >> /tmp/odo-times.log
    fi
fi

# We now run the assembly script. If there is a custom one written in the
# source files, we use that instead.
echo "$(date +'%Y%m%d.%H%M%S-%3N') - Init assemble" >> /tmp/odo-times.log
if [ -f ${ODO_S2I_SRC_BIN_PATH}/src/.s2i/bin/assemble ]; then
    ${ODO_S2I_SRC_BIN_PATH}/src/.s2i/bin/assemble
elif [ -n "${ODO_S2I_SCRIPTS_URL}" ]; then # For S2I scripts path, use the env var set by odo if not available in component source
    rm -rf /opt/app-root/src/.git # ensure we don't copy git files since they can cause problems
    ${ODO_S2I_SCRIPTS_URL}/assemble
else
    /usr/libexec/s2i/assemble
fi
echo "$(date +'%Y%m%d.%H%M%S-%3N') - End assemble" >> /tmp/odo-times.log

# After assemble script is run(which delets sources from destination dir by doing mv of them to the WorkingDir) and if only its component created from sour
# copy back the sources from Source backup dir to DestinationDir for subsequent push of only updates by watch
if [ ! -z "${ODO_S2I_WORKING_DIR}" ] && [ -n  "$ODO_SRC_BACKUP_DIR" ] && ([ "${ODO_S2I_SRC_BIN_PATH}" != "${ODO_S2I_WORKING_DIR}" ] || [ "${ODO_S2I_DEPLOYM
ENT_DIR}" != "${ODO_S2I_WORKING_DIR}" ]); then
    echo "$(date +'%Y%m%d.%H%M%S-%3N'): Init after assemble rsync" >> /tmp/odo-times.log
    rsync -aO ${ODO_SRC_BACKUP_DIR}/src/. ${ODO_S2I_SRC_BIN_PATH}/src/
    echo "$(date +'%Y%m%d.%H%M%S-%3N'): End after assemble rsync" >> /tmp/odo-times.log
fi

###
# Check "ODO_S2I_DEPLOYMENT_DIR" environment variable and if it's present,
# copy content of directory to ${ODO_DEPLOYMENT_BACKUP_DIR} directory
# Ref: https://github.com/redhat-developer/odo/issues/445
# if [ -n "$ODO_S2I_DEPLOYMENT_DIR" ]; then
#     echo "$(date +'%Y%m%d.%H%M%S-%3N'): Init rsync DEPLOYMENT_DIR" >> /tmp/odo-times.log
#     if [ ! -d "${ODO_DEPLOYMENT_BACKUP_DIR}" ]; then
#         mkdir -p ${ODO_DEPLOYMENT_BACKUP_DIR}
#     fi
# 
#    rsync -aO ${ODO_S2I_DEPLOYMENT_DIR}/. ${ODO_DEPLOYMENT_BACKUP_DIR}/
#    echo "$(date +'%Y%m%d.%H%M%S-%3N'): End rsync DEPLOYMENT_DIR" Â©
# fi
####

# Restart supervisord in order to actualy run the application
# This is a dumb way to start as supervisord does not have a restart function
echo "$(date +'%Y%m%d.%H%M%S-%3N'): Init restart:" >> /tmp/odo-times.log
if [ -n "$ODO_S2I_BUILDER_IMG" ] && [[ $ODO_S2I_BUILDER_IMG == rhoar-nodejs/nodejs-* ]]; then
  echo "Not doing anything as it's RHOAR nodejs"  >> /tmp/odo-times.log
else
  /var/lib/supervisord/bin/supervisord ctl stop run; /var/lib/supervisord/bin/supervisord ctl start run
fi
echo "$(date +'%Y%m%d.%H%M%S-%3N'): End restart:" >> /tmp/odo-times.log
